/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { IGenericModalProps } from "./components/common/generic-modal/generic-modal.types";
import { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger/ledger.types";
import { IEventBus } from "./utils/EventBus";
import { IProviderBase, ProviderTypeEnum } from "./types/provider.types";
import { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
import { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { ITransactionAccount, ITransactionIconInfo, ITransactionsTableRow } from "./components/controlled/transactions-table/transactions-table.type";
import { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { IconSizeEnumType } from "./components/common/transaction-asset-icon/transaction-asset-icon.types";
import { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { LocalJSX as JSX } from "@stencil/core";
import { ITransactionValue } from "./components/controlled/transactions-table/transactions-table.type";
import { IWalletConnectPanelData } from "./components/functional/wallet-connect/wallet-connect.types";
export { IconDefinition } from "@fortawesome/free-solid-svg-icons";
export { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { IGenericModalProps } from "./components/common/generic-modal/generic-modal.types";
export { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger/ledger.types";
export { IEventBus } from "./utils/EventBus";
export { IProviderBase, ProviderTypeEnum } from "./types/provider.types";
export { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
export { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { ITransactionAccount, ITransactionIconInfo, ITransactionsTableRow } from "./components/controlled/transactions-table/transactions-table.type";
export { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { IconSizeEnumType } from "./components/common/transaction-asset-icon/transaction-asset-icon.types";
export { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { LocalJSX as JSX } from "@stencil/core";
export { ITransactionValue } from "./components/controlled/transactions-table/transactions-table.type";
export { IWalletConnectPanelData } from "./components/functional/wallet-connect/wallet-connect.types";
export namespace Components {
    interface DrtAngleLeftIcon {
    }
    interface DrtAngleRightIcon {
    }
    interface DrtAnglesLeftIcon {
    }
    interface DrtAnglesRightIcon {
    }
    interface DrtArrowRightIcon {
        "class"?: string;
    }
    interface DrtArrowUpRightIcon {
        "class"?: string;
    }
    interface DrtBackArrowIcon {
    }
    interface DrtCheckIcon {
        "class"?: string;
    }
    interface DrtCircleExclamationIcon {
    }
    interface DrtCloseIcon {
    }
    interface DrtCopyButton {
        /**
          * @default 'copy-button'
         */
        "class"?: string;
        "copyIcon"?: IconDefinition | string;
        /**
          * @default 'copy-button-icon'
         */
        "iconClass"?: string;
        "successIcon"?: IconDefinition | string;
        "text": string;
    }
    interface DrtCustomToast {
        "toast": IComponentToast;
    }
    interface DrtDefaultTransactionIconLarge {
    }
    interface DrtDefaultTransactionIconSmall {
    }
    interface DrtDharitriLogoIcon {
        "class"?: string;
    }
    interface DrtExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition | string;
        /**
          * @default 'explorer-link-icon'
         */
        "iconClass"?: string;
        "link": string;
        "text"?: string;
    }
    interface DrtExtensionProviderIcon {
        "class"?: string;
        "height"?: number;
        "width"?: number;
    }
    interface DrtFaIcon {
        /**
          * @default 'fa-icon'
         */
        "class"?: string;
        "description"?: string;
        "icon": IconDefinition | string;
    }
    interface DrtFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "decimalClass"?: string;
        "isValid": boolean;
        "label"?: string;
        "labelClass"?: string;
        /**
          * @default true
         */
        "showLabel"?: boolean;
        "valueDecimal": string;
        "valueInteger": string;
    }
    interface DrtGenericModal {
        "body": IGenericModalProps['body'];
        "modalSubtitle"?: IGenericModalProps['modalSubtitle'];
        "modalTitle": IGenericModalProps['modalTitle'];
    }
    interface DrtGenericSpinner {
    }
    interface DrtGenericToast {
        "toast": CustomToastType;
    }
    interface DrtLedgerAddresses {
        "accountScreenData": IAccountScreenData;
        "selectedIndex": number;
    }
    interface DrtLedgerConfirm {
        "confirmScreenData": IConfirmScreenData;
    }
    interface DrtLedgerFlow {
        /**
          * @default {     accountScreenData: null,     confirmScreenData: null,     connectScreenData: {},   }
         */
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtLedgerIcon {
    }
    interface DrtLedgerIntro {
        "connectScreenData"?: IConnectScreenData;
        /**
          * @default false
         */
        "isAwaiting"?: boolean;
    }
    interface DrtLedgerProviderIcon {
        "class"?: string;
    }
    interface DrtMagnifyingGlassIcon {
        "class"?: string;
    }
    interface DrtMetamaskProviderIcon {
        "class"?: string;
    }
    interface DrtNotificationsFeed {
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtPagination {
        "class"?: string;
        /**
          * @default 1
         */
        "currentPage": number;
        /**
          * @default false
         */
        "isDisabled"?: boolean;
        "totalPages": number;
    }
    interface DrtPaginationEllipsis {
        /**
          * @default false
         */
        "isActive": boolean;
    }
    interface DrtPaginationEllipsisForm {
        /**
          * @default false
         */
        "isVisible": boolean;
        "maxPageToSearchFor": number;
    }
    interface DrtPasskeyProviderIcon {
        "class"?: string;
    }
    interface DrtPencilIcon {
        "class"?: string;
    }
    interface DrtPendingTransactionsPanel {
        /**
          * @default {     provider: null,     shouldClose: false,   }
         */
        "data": IPendingTransactionsPanelState;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtPreloader {
        "class"?: string;
    }
    interface DrtProviderIdleScreen {
        /**
          * @default ''
         */
        "introText": string;
        /**
          * @default null
         */
        "provider": IProviderBase | null;
    }
    interface DrtSidePanel {
        "hasBackButton"?: boolean;
        /**
          * @default false
         */
        "isOpen": boolean;
        "panelClassName"?: string;
        "panelTitle": string;
        /**
          * @default true
         */
        "showHeader"?: boolean;
    }
    interface DrtSidePanelHeader {
        /**
          * @default true
         */
        "hasLeftButton"?: boolean;
        /**
          * @default true
         */
        "hasRightButton"?: boolean;
        "panelClassName"?: string;
        "panelTitle": string;
    }
    interface DrtSignTransactionsAdvanced {
        "data": string;
        "highlight"?: string;
    }
    interface DrtSignTransactionsFooter {
    }
    interface DrtSignTransactionsOverview {
        "action": string;
        "amount": string;
        "identifier": string;
        "interactor": string;
        "interactorIconUrl": string;
        /**
          * @default false
         */
        "isApp": boolean;
        /**
          * @default '~$0.00078'
         */
        "networkFee": string;
        "tokenIconUrl": string;
        "usdValue": string;
    }
    interface DrtSignTransactionsPanel {
        /**
          * @default {     commonData: {       rewaLabel: '',       feeLimit: '',       feeInFiatLimit: '',       transactionsCount: 0,       currentIndexToSign: 0,       currentIndex: 0,       ppuOptions: [],     },     tokenTransaction: null,     nftTransaction: null,     sftTransaction: null,   }
         */
        "data": ISignTransactionsPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtSimpleToast {
        "toast": ISimpleToast;
    }
    interface DrtSpinnerIcon {
        "class"?: string;
    }
    interface DrtToastList {
        /**
          * @default []
         */
        "customToasts": CustomToastType1[];
        "getEventBus": () => Promise<IEventBus>;
        /**
          * @default []
         */
        "transactionToasts": ITransactionToast[];
    }
    interface DrtTooltip {
        "class"?: string;
        /**
          * @default 'top'
         */
        "position": 'top' | 'bottom';
        "trigger": HTMLElement;
        /**
          * @default false
         */
        "triggerOnClick"?: boolean;
    }
    interface DrtTransactionAccount {
        "account": ITransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope": 'receiver' | 'sender';
        /**
          * @default false
         */
        "showLockedAccounts": boolean;
    }
    interface DrtTransactionAccountName {
        "address": string;
        "class"?: string;
        "dataTestId"?: string;
        "description": string;
        "name"?: string;
    }
    interface DrtTransactionAge {
        "age": string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface DrtTransactionAssetIcon {
        "iconSize": IconSizeEnumType;
        "transaction": ITransactionListItem;
    }
    interface DrtTransactionDirectionBadge {
        "class"?: string;
        "direction": string;
    }
    interface DrtTransactionHash {
        "class"?: string;
        "transaction": ITransactionsTableRow;
    }
    interface DrtTransactionIcon {
        "class"?: string;
        "iconInfo": ITransactionIconInfo;
    }
    interface DrtTransactionListItem {
        "transaction": ITransactionListItem1;
    }
    interface DrtTransactionMethod {
        "actionDescription": string;
        "class"?: string;
        "method": string;
    }
    interface DrtTransactionShards {
        "class"?: string;
        "transaction": ITransactionsTableRow;
    }
    interface DrtTransactionToast {
        "fullWidth"?: boolean;
        /**
          * @default ''
         */
        "processedTransactionsStatus": string | JSX.Element;
        "toastDataState": IToastDataState;
        /**
          * @default ''
         */
        "toastId": string;
        "transactionProgressState"?: ITransactionProgressState;
        /**
          * @default []
         */
        "transactions": ITransactionListItem[];
        "wrapperClass": string;
    }
    interface DrtTransactionToastContent {
        "fullWidth"?: boolean;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState": IToastDataState;
        "transactions": ITransactionListItem[];
    }
    interface DrtTransactionToastDetails {
        /**
          * @default 5
         */
        "maxShownTransactions": number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass": string;
        "transactions"?: ITransactionListItem[];
    }
    interface DrtTransactionToastDetailsBody {
        "hash": string;
        "index": string;
        "link": string;
        "status"?: string;
        /**
          * @default 'transaction-details-list-item'
         */
        "transactionClass"?: string;
    }
    interface DrtTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface DrtTransactionValue {
        "class"?: string;
        "value": ITransactionValue;
    }
    interface DrtTransactionsTable {
        "class"?: string;
        "transactions": ITransactionsTableRow[];
    }
    interface DrtTriangularWarningIcon {
    }
    interface DrtTrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text": string;
    }
    interface DrtUnlockButton {
        "class"?: string;
        "icon"?: HTMLElement;
        "iconUrl": string;
        "label": string;
        "type"?: IProviderBase['type'];
    }
    interface DrtUnlockPanel {
        /**
          * @default []
         */
        "allowedProviders": IProviderBase[];
        "getEventBus": () => Promise<IEventBus>;
        /**
          * @default false
         */
        "isOpen": boolean;
    }
    interface DrtUnlockPanelFooter {
    }
    interface DrtUnlockPanelGroup {
        /**
          * @default ''
         */
        "groupTitle": string;
        /**
          * @default []
         */
        "providers": IProviderBase[];
    }
    interface DrtUnlockProviderButton {
        "class"?: string;
        "provider": IProviderBase<ProviderTypeEnum>;
    }
    interface DrtWalletConnectFlow {
        /**
          * @default ''
         */
        "qrCodeSvg": string;
    }
    interface DrtWalletConnectProvider {
        /**
          * @default { wcURI: '' }
         */
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtWalletProviderIcon {
        "class"?: string;
    }
    interface DrtXaliasProviderIcon {
    }
    interface DrtXportalDownloadQrIcon {
    }
    interface DrtXportalQrCodePreloader {
        "class"?: string;
    }
}
export interface DrtCustomToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtCustomToastElement;
}
export interface DrtGenericModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtGenericModalElement;
}
export interface DrtGenericToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtGenericToastElement;
}
export interface DrtLedgerAddressesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtLedgerAddressesElement;
}
export interface DrtLedgerIntroCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtLedgerIntroElement;
}
export interface DrtPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtPaginationElement;
}
export interface DrtPaginationEllipsisFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtPaginationEllipsisFormElement;
}
export interface DrtProviderIdleScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtProviderIdleScreenElement;
}
export interface DrtSidePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtSidePanelElement;
}
export interface DrtSidePanelHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtSidePanelHeaderElement;
}
export interface DrtSimpleToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtSimpleToastElement;
}
export interface DrtTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtTooltipElement;
}
export interface DrtTransactionToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtTransactionToastElement;
}
export interface DrtTransactionToastContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtTransactionToastContentElement;
}
export interface DrtUnlockPanelGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtUnlockPanelGroupElement;
}
declare global {
    interface HTMLDrtAngleLeftIconElement extends Components.DrtAngleLeftIcon, HTMLStencilElement {
    }
    var HTMLDrtAngleLeftIconElement: {
        prototype: HTMLDrtAngleLeftIconElement;
        new (): HTMLDrtAngleLeftIconElement;
    };
    interface HTMLDrtAngleRightIconElement extends Components.DrtAngleRightIcon, HTMLStencilElement {
    }
    var HTMLDrtAngleRightIconElement: {
        prototype: HTMLDrtAngleRightIconElement;
        new (): HTMLDrtAngleRightIconElement;
    };
    interface HTMLDrtAnglesLeftIconElement extends Components.DrtAnglesLeftIcon, HTMLStencilElement {
    }
    var HTMLDrtAnglesLeftIconElement: {
        prototype: HTMLDrtAnglesLeftIconElement;
        new (): HTMLDrtAnglesLeftIconElement;
    };
    interface HTMLDrtAnglesRightIconElement extends Components.DrtAnglesRightIcon, HTMLStencilElement {
    }
    var HTMLDrtAnglesRightIconElement: {
        prototype: HTMLDrtAnglesRightIconElement;
        new (): HTMLDrtAnglesRightIconElement;
    };
    interface HTMLDrtArrowRightIconElement extends Components.DrtArrowRightIcon, HTMLStencilElement {
    }
    var HTMLDrtArrowRightIconElement: {
        prototype: HTMLDrtArrowRightIconElement;
        new (): HTMLDrtArrowRightIconElement;
    };
    interface HTMLDrtArrowUpRightIconElement extends Components.DrtArrowUpRightIcon, HTMLStencilElement {
    }
    var HTMLDrtArrowUpRightIconElement: {
        prototype: HTMLDrtArrowUpRightIconElement;
        new (): HTMLDrtArrowUpRightIconElement;
    };
    interface HTMLDrtBackArrowIconElement extends Components.DrtBackArrowIcon, HTMLStencilElement {
    }
    var HTMLDrtBackArrowIconElement: {
        prototype: HTMLDrtBackArrowIconElement;
        new (): HTMLDrtBackArrowIconElement;
    };
    interface HTMLDrtCheckIconElement extends Components.DrtCheckIcon, HTMLStencilElement {
    }
    var HTMLDrtCheckIconElement: {
        prototype: HTMLDrtCheckIconElement;
        new (): HTMLDrtCheckIconElement;
    };
    interface HTMLDrtCircleExclamationIconElement extends Components.DrtCircleExclamationIcon, HTMLStencilElement {
    }
    var HTMLDrtCircleExclamationIconElement: {
        prototype: HTMLDrtCircleExclamationIconElement;
        new (): HTMLDrtCircleExclamationIconElement;
    };
    interface HTMLDrtCloseIconElement extends Components.DrtCloseIcon, HTMLStencilElement {
    }
    var HTMLDrtCloseIconElement: {
        prototype: HTMLDrtCloseIconElement;
        new (): HTMLDrtCloseIconElement;
    };
    interface HTMLDrtCopyButtonElement extends Components.DrtCopyButton, HTMLStencilElement {
    }
    var HTMLDrtCopyButtonElement: {
        prototype: HTMLDrtCopyButtonElement;
        new (): HTMLDrtCopyButtonElement;
    };
    interface HTMLDrtCustomToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLDrtCustomToastElement extends Components.DrtCustomToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtCustomToastElementEventMap>(type: K, listener: (this: HTMLDrtCustomToastElement, ev: DrtCustomToastCustomEvent<HTMLDrtCustomToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtCustomToastElementEventMap>(type: K, listener: (this: HTMLDrtCustomToastElement, ev: DrtCustomToastCustomEvent<HTMLDrtCustomToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtCustomToastElement: {
        prototype: HTMLDrtCustomToastElement;
        new (): HTMLDrtCustomToastElement;
    };
    interface HTMLDrtDefaultTransactionIconLargeElement extends Components.DrtDefaultTransactionIconLarge, HTMLStencilElement {
    }
    var HTMLDrtDefaultTransactionIconLargeElement: {
        prototype: HTMLDrtDefaultTransactionIconLargeElement;
        new (): HTMLDrtDefaultTransactionIconLargeElement;
    };
    interface HTMLDrtDefaultTransactionIconSmallElement extends Components.DrtDefaultTransactionIconSmall, HTMLStencilElement {
    }
    var HTMLDrtDefaultTransactionIconSmallElement: {
        prototype: HTMLDrtDefaultTransactionIconSmallElement;
        new (): HTMLDrtDefaultTransactionIconSmallElement;
    };
    interface HTMLDrtDharitriLogoIconElement extends Components.DrtDharitriLogoIcon, HTMLStencilElement {
    }
    var HTMLDrtDharitriLogoIconElement: {
        prototype: HTMLDrtDharitriLogoIconElement;
        new (): HTMLDrtDharitriLogoIconElement;
    };
    interface HTMLDrtExplorerLinkElement extends Components.DrtExplorerLink, HTMLStencilElement {
    }
    var HTMLDrtExplorerLinkElement: {
        prototype: HTMLDrtExplorerLinkElement;
        new (): HTMLDrtExplorerLinkElement;
    };
    interface HTMLDrtExtensionProviderIconElement extends Components.DrtExtensionProviderIcon, HTMLStencilElement {
    }
    var HTMLDrtExtensionProviderIconElement: {
        prototype: HTMLDrtExtensionProviderIconElement;
        new (): HTMLDrtExtensionProviderIconElement;
    };
    interface HTMLDrtFaIconElement extends Components.DrtFaIcon, HTMLStencilElement {
    }
    var HTMLDrtFaIconElement: {
        prototype: HTMLDrtFaIconElement;
        new (): HTMLDrtFaIconElement;
    };
    interface HTMLDrtFormatAmountElement extends Components.DrtFormatAmount, HTMLStencilElement {
    }
    var HTMLDrtFormatAmountElement: {
        prototype: HTMLDrtFormatAmountElement;
        new (): HTMLDrtFormatAmountElement;
    };
    interface HTMLDrtGenericModalElementEventMap {
        "close": any;
    }
    interface HTMLDrtGenericModalElement extends Components.DrtGenericModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtGenericModalElementEventMap>(type: K, listener: (this: HTMLDrtGenericModalElement, ev: DrtGenericModalCustomEvent<HTMLDrtGenericModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtGenericModalElementEventMap>(type: K, listener: (this: HTMLDrtGenericModalElement, ev: DrtGenericModalCustomEvent<HTMLDrtGenericModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtGenericModalElement: {
        prototype: HTMLDrtGenericModalElement;
        new (): HTMLDrtGenericModalElement;
    };
    interface HTMLDrtGenericSpinnerElement extends Components.DrtGenericSpinner, HTMLStencilElement {
    }
    var HTMLDrtGenericSpinnerElement: {
        prototype: HTMLDrtGenericSpinnerElement;
        new (): HTMLDrtGenericSpinnerElement;
    };
    interface HTMLDrtGenericToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLDrtGenericToastElement extends Components.DrtGenericToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtGenericToastElementEventMap>(type: K, listener: (this: HTMLDrtGenericToastElement, ev: DrtGenericToastCustomEvent<HTMLDrtGenericToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtGenericToastElementEventMap>(type: K, listener: (this: HTMLDrtGenericToastElement, ev: DrtGenericToastCustomEvent<HTMLDrtGenericToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtGenericToastElement: {
        prototype: HTMLDrtGenericToastElement;
        new (): HTMLDrtGenericToastElement;
    };
    interface HTMLDrtLedgerAddressesElementEventMap {
        "accessWallet": any;
        "selectAccount": any;
        "pageChange": number;
    }
    interface HTMLDrtLedgerAddressesElement extends Components.DrtLedgerAddresses, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtLedgerAddressesElementEventMap>(type: K, listener: (this: HTMLDrtLedgerAddressesElement, ev: DrtLedgerAddressesCustomEvent<HTMLDrtLedgerAddressesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtLedgerAddressesElementEventMap>(type: K, listener: (this: HTMLDrtLedgerAddressesElement, ev: DrtLedgerAddressesCustomEvent<HTMLDrtLedgerAddressesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtLedgerAddressesElement: {
        prototype: HTMLDrtLedgerAddressesElement;
        new (): HTMLDrtLedgerAddressesElement;
    };
    interface HTMLDrtLedgerConfirmElement extends Components.DrtLedgerConfirm, HTMLStencilElement {
    }
    var HTMLDrtLedgerConfirmElement: {
        prototype: HTMLDrtLedgerConfirmElement;
        new (): HTMLDrtLedgerConfirmElement;
    };
    interface HTMLDrtLedgerFlowElement extends Components.DrtLedgerFlow, HTMLStencilElement {
    }
    var HTMLDrtLedgerFlowElement: {
        prototype: HTMLDrtLedgerFlowElement;
        new (): HTMLDrtLedgerFlowElement;
    };
    interface HTMLDrtLedgerIconElement extends Components.DrtLedgerIcon, HTMLStencilElement {
    }
    var HTMLDrtLedgerIconElement: {
        prototype: HTMLDrtLedgerIconElement;
        new (): HTMLDrtLedgerIconElement;
    };
    interface HTMLDrtLedgerIntroElementEventMap {
        "connect": any;
    }
    interface HTMLDrtLedgerIntroElement extends Components.DrtLedgerIntro, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtLedgerIntroElementEventMap>(type: K, listener: (this: HTMLDrtLedgerIntroElement, ev: DrtLedgerIntroCustomEvent<HTMLDrtLedgerIntroElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtLedgerIntroElementEventMap>(type: K, listener: (this: HTMLDrtLedgerIntroElement, ev: DrtLedgerIntroCustomEvent<HTMLDrtLedgerIntroElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtLedgerIntroElement: {
        prototype: HTMLDrtLedgerIntroElement;
        new (): HTMLDrtLedgerIntroElement;
    };
    interface HTMLDrtLedgerProviderIconElement extends Components.DrtLedgerProviderIcon, HTMLStencilElement {
    }
    var HTMLDrtLedgerProviderIconElement: {
        prototype: HTMLDrtLedgerProviderIconElement;
        new (): HTMLDrtLedgerProviderIconElement;
    };
    interface HTMLDrtMagnifyingGlassIconElement extends Components.DrtMagnifyingGlassIcon, HTMLStencilElement {
    }
    var HTMLDrtMagnifyingGlassIconElement: {
        prototype: HTMLDrtMagnifyingGlassIconElement;
        new (): HTMLDrtMagnifyingGlassIconElement;
    };
    interface HTMLDrtMetamaskProviderIconElement extends Components.DrtMetamaskProviderIcon, HTMLStencilElement {
    }
    var HTMLDrtMetamaskProviderIconElement: {
        prototype: HTMLDrtMetamaskProviderIconElement;
        new (): HTMLDrtMetamaskProviderIconElement;
    };
    interface HTMLDrtNotificationsFeedElement extends Components.DrtNotificationsFeed, HTMLStencilElement {
    }
    var HTMLDrtNotificationsFeedElement: {
        prototype: HTMLDrtNotificationsFeedElement;
        new (): HTMLDrtNotificationsFeedElement;
    };
    interface HTMLDrtPaginationElementEventMap {
        "pageChange": number;
    }
    interface HTMLDrtPaginationElement extends Components.DrtPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtPaginationElementEventMap>(type: K, listener: (this: HTMLDrtPaginationElement, ev: DrtPaginationCustomEvent<HTMLDrtPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtPaginationElementEventMap>(type: K, listener: (this: HTMLDrtPaginationElement, ev: DrtPaginationCustomEvent<HTMLDrtPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtPaginationElement: {
        prototype: HTMLDrtPaginationElement;
        new (): HTMLDrtPaginationElement;
    };
    interface HTMLDrtPaginationEllipsisElement extends Components.DrtPaginationEllipsis, HTMLStencilElement {
    }
    var HTMLDrtPaginationEllipsisElement: {
        prototype: HTMLDrtPaginationEllipsisElement;
        new (): HTMLDrtPaginationEllipsisElement;
    };
    interface HTMLDrtPaginationEllipsisFormElementEventMap {
        "search": number;
    }
    interface HTMLDrtPaginationEllipsisFormElement extends Components.DrtPaginationEllipsisForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtPaginationEllipsisFormElementEventMap>(type: K, listener: (this: HTMLDrtPaginationEllipsisFormElement, ev: DrtPaginationEllipsisFormCustomEvent<HTMLDrtPaginationEllipsisFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtPaginationEllipsisFormElementEventMap>(type: K, listener: (this: HTMLDrtPaginationEllipsisFormElement, ev: DrtPaginationEllipsisFormCustomEvent<HTMLDrtPaginationEllipsisFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtPaginationEllipsisFormElement: {
        prototype: HTMLDrtPaginationEllipsisFormElement;
        new (): HTMLDrtPaginationEllipsisFormElement;
    };
    interface HTMLDrtPasskeyProviderIconElement extends Components.DrtPasskeyProviderIcon, HTMLStencilElement {
    }
    var HTMLDrtPasskeyProviderIconElement: {
        prototype: HTMLDrtPasskeyProviderIconElement;
        new (): HTMLDrtPasskeyProviderIconElement;
    };
    interface HTMLDrtPencilIconElement extends Components.DrtPencilIcon, HTMLStencilElement {
    }
    var HTMLDrtPencilIconElement: {
        prototype: HTMLDrtPencilIconElement;
        new (): HTMLDrtPencilIconElement;
    };
    interface HTMLDrtPendingTransactionsPanelElement extends Components.DrtPendingTransactionsPanel, HTMLStencilElement {
    }
    var HTMLDrtPendingTransactionsPanelElement: {
        prototype: HTMLDrtPendingTransactionsPanelElement;
        new (): HTMLDrtPendingTransactionsPanelElement;
    };
    interface HTMLDrtPreloaderElement extends Components.DrtPreloader, HTMLStencilElement {
    }
    var HTMLDrtPreloaderElement: {
        prototype: HTMLDrtPreloaderElement;
        new (): HTMLDrtPreloaderElement;
    };
    interface HTMLDrtProviderIdleScreenElementEventMap {
        "close": any;
        "access": any;
    }
    interface HTMLDrtProviderIdleScreenElement extends Components.DrtProviderIdleScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtProviderIdleScreenElementEventMap>(type: K, listener: (this: HTMLDrtProviderIdleScreenElement, ev: DrtProviderIdleScreenCustomEvent<HTMLDrtProviderIdleScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtProviderIdleScreenElementEventMap>(type: K, listener: (this: HTMLDrtProviderIdleScreenElement, ev: DrtProviderIdleScreenCustomEvent<HTMLDrtProviderIdleScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtProviderIdleScreenElement: {
        prototype: HTMLDrtProviderIdleScreenElement;
        new (): HTMLDrtProviderIdleScreenElement;
    };
    interface HTMLDrtSidePanelElementEventMap {
        "close": any;
        "back": any;
    }
    interface HTMLDrtSidePanelElement extends Components.DrtSidePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtSidePanelElementEventMap>(type: K, listener: (this: HTMLDrtSidePanelElement, ev: DrtSidePanelCustomEvent<HTMLDrtSidePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtSidePanelElementEventMap>(type: K, listener: (this: HTMLDrtSidePanelElement, ev: DrtSidePanelCustomEvent<HTMLDrtSidePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtSidePanelElement: {
        prototype: HTMLDrtSidePanelElement;
        new (): HTMLDrtSidePanelElement;
    };
    interface HTMLDrtSidePanelHeaderElementEventMap {
        "rightButtonClick": any;
        "leftButtonClick": any;
    }
    interface HTMLDrtSidePanelHeaderElement extends Components.DrtSidePanelHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtSidePanelHeaderElementEventMap>(type: K, listener: (this: HTMLDrtSidePanelHeaderElement, ev: DrtSidePanelHeaderCustomEvent<HTMLDrtSidePanelHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtSidePanelHeaderElementEventMap>(type: K, listener: (this: HTMLDrtSidePanelHeaderElement, ev: DrtSidePanelHeaderCustomEvent<HTMLDrtSidePanelHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtSidePanelHeaderElement: {
        prototype: HTMLDrtSidePanelHeaderElement;
        new (): HTMLDrtSidePanelHeaderElement;
    };
    interface HTMLDrtSignTransactionsAdvancedElement extends Components.DrtSignTransactionsAdvanced, HTMLStencilElement {
    }
    var HTMLDrtSignTransactionsAdvancedElement: {
        prototype: HTMLDrtSignTransactionsAdvancedElement;
        new (): HTMLDrtSignTransactionsAdvancedElement;
    };
    interface HTMLDrtSignTransactionsFooterElement extends Components.DrtSignTransactionsFooter, HTMLStencilElement {
    }
    var HTMLDrtSignTransactionsFooterElement: {
        prototype: HTMLDrtSignTransactionsFooterElement;
        new (): HTMLDrtSignTransactionsFooterElement;
    };
    interface HTMLDrtSignTransactionsOverviewElement extends Components.DrtSignTransactionsOverview, HTMLStencilElement {
    }
    var HTMLDrtSignTransactionsOverviewElement: {
        prototype: HTMLDrtSignTransactionsOverviewElement;
        new (): HTMLDrtSignTransactionsOverviewElement;
    };
    interface HTMLDrtSignTransactionsPanelElement extends Components.DrtSignTransactionsPanel, HTMLStencilElement {
    }
    var HTMLDrtSignTransactionsPanelElement: {
        prototype: HTMLDrtSignTransactionsPanelElement;
        new (): HTMLDrtSignTransactionsPanelElement;
    };
    interface HTMLDrtSimpleToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLDrtSimpleToastElement extends Components.DrtSimpleToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtSimpleToastElementEventMap>(type: K, listener: (this: HTMLDrtSimpleToastElement, ev: DrtSimpleToastCustomEvent<HTMLDrtSimpleToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtSimpleToastElementEventMap>(type: K, listener: (this: HTMLDrtSimpleToastElement, ev: DrtSimpleToastCustomEvent<HTMLDrtSimpleToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtSimpleToastElement: {
        prototype: HTMLDrtSimpleToastElement;
        new (): HTMLDrtSimpleToastElement;
    };
    interface HTMLDrtSpinnerIconElement extends Components.DrtSpinnerIcon, HTMLStencilElement {
    }
    var HTMLDrtSpinnerIconElement: {
        prototype: HTMLDrtSpinnerIconElement;
        new (): HTMLDrtSpinnerIconElement;
    };
    interface HTMLDrtToastListElement extends Components.DrtToastList, HTMLStencilElement {
    }
    var HTMLDrtToastListElement: {
        prototype: HTMLDrtToastListElement;
        new (): HTMLDrtToastListElement;
    };
    interface HTMLDrtTooltipElementEventMap {
        "triggerRender": boolean;
    }
    interface HTMLDrtTooltipElement extends Components.DrtTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtTooltipElementEventMap>(type: K, listener: (this: HTMLDrtTooltipElement, ev: DrtTooltipCustomEvent<HTMLDrtTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtTooltipElementEventMap>(type: K, listener: (this: HTMLDrtTooltipElement, ev: DrtTooltipCustomEvent<HTMLDrtTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtTooltipElement: {
        prototype: HTMLDrtTooltipElement;
        new (): HTMLDrtTooltipElement;
    };
    interface HTMLDrtTransactionAccountElement extends Components.DrtTransactionAccount, HTMLStencilElement {
    }
    var HTMLDrtTransactionAccountElement: {
        prototype: HTMLDrtTransactionAccountElement;
        new (): HTMLDrtTransactionAccountElement;
    };
    interface HTMLDrtTransactionAccountNameElement extends Components.DrtTransactionAccountName, HTMLStencilElement {
    }
    var HTMLDrtTransactionAccountNameElement: {
        prototype: HTMLDrtTransactionAccountNameElement;
        new (): HTMLDrtTransactionAccountNameElement;
    };
    interface HTMLDrtTransactionAgeElement extends Components.DrtTransactionAge, HTMLStencilElement {
    }
    var HTMLDrtTransactionAgeElement: {
        prototype: HTMLDrtTransactionAgeElement;
        new (): HTMLDrtTransactionAgeElement;
    };
    interface HTMLDrtTransactionAssetIconElement extends Components.DrtTransactionAssetIcon, HTMLStencilElement {
    }
    var HTMLDrtTransactionAssetIconElement: {
        prototype: HTMLDrtTransactionAssetIconElement;
        new (): HTMLDrtTransactionAssetIconElement;
    };
    interface HTMLDrtTransactionDirectionBadgeElement extends Components.DrtTransactionDirectionBadge, HTMLStencilElement {
    }
    var HTMLDrtTransactionDirectionBadgeElement: {
        prototype: HTMLDrtTransactionDirectionBadgeElement;
        new (): HTMLDrtTransactionDirectionBadgeElement;
    };
    interface HTMLDrtTransactionHashElement extends Components.DrtTransactionHash, HTMLStencilElement {
    }
    var HTMLDrtTransactionHashElement: {
        prototype: HTMLDrtTransactionHashElement;
        new (): HTMLDrtTransactionHashElement;
    };
    interface HTMLDrtTransactionIconElement extends Components.DrtTransactionIcon, HTMLStencilElement {
    }
    var HTMLDrtTransactionIconElement: {
        prototype: HTMLDrtTransactionIconElement;
        new (): HTMLDrtTransactionIconElement;
    };
    interface HTMLDrtTransactionListItemElement extends Components.DrtTransactionListItem, HTMLStencilElement {
    }
    var HTMLDrtTransactionListItemElement: {
        prototype: HTMLDrtTransactionListItemElement;
        new (): HTMLDrtTransactionListItemElement;
    };
    interface HTMLDrtTransactionMethodElement extends Components.DrtTransactionMethod, HTMLStencilElement {
    }
    var HTMLDrtTransactionMethodElement: {
        prototype: HTMLDrtTransactionMethodElement;
        new (): HTMLDrtTransactionMethodElement;
    };
    interface HTMLDrtTransactionShardsElement extends Components.DrtTransactionShards, HTMLStencilElement {
    }
    var HTMLDrtTransactionShardsElement: {
        prototype: HTMLDrtTransactionShardsElement;
        new (): HTMLDrtTransactionShardsElement;
    };
    interface HTMLDrtTransactionToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLDrtTransactionToastElement extends Components.DrtTransactionToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtTransactionToastElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastElement, ev: DrtTransactionToastCustomEvent<HTMLDrtTransactionToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtTransactionToastElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastElement, ev: DrtTransactionToastCustomEvent<HTMLDrtTransactionToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtTransactionToastElement: {
        prototype: HTMLDrtTransactionToastElement;
        new (): HTMLDrtTransactionToastElement;
    };
    interface HTMLDrtTransactionToastContentElementEventMap {
        "deleteToast": void;
    }
    interface HTMLDrtTransactionToastContentElement extends Components.DrtTransactionToastContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastContentElement, ev: DrtTransactionToastContentCustomEvent<HTMLDrtTransactionToastContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastContentElement, ev: DrtTransactionToastContentCustomEvent<HTMLDrtTransactionToastContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtTransactionToastContentElement: {
        prototype: HTMLDrtTransactionToastContentElement;
        new (): HTMLDrtTransactionToastContentElement;
    };
    interface HTMLDrtTransactionToastDetailsElement extends Components.DrtTransactionToastDetails, HTMLStencilElement {
    }
    var HTMLDrtTransactionToastDetailsElement: {
        prototype: HTMLDrtTransactionToastDetailsElement;
        new (): HTMLDrtTransactionToastDetailsElement;
    };
    interface HTMLDrtTransactionToastDetailsBodyElement extends Components.DrtTransactionToastDetailsBody, HTMLStencilElement {
    }
    var HTMLDrtTransactionToastDetailsBodyElement: {
        prototype: HTMLDrtTransactionToastDetailsBodyElement;
        new (): HTMLDrtTransactionToastDetailsBodyElement;
    };
    interface HTMLDrtTransactionToastProgressElement extends Components.DrtTransactionToastProgress, HTMLStencilElement {
    }
    var HTMLDrtTransactionToastProgressElement: {
        prototype: HTMLDrtTransactionToastProgressElement;
        new (): HTMLDrtTransactionToastProgressElement;
    };
    interface HTMLDrtTransactionValueElement extends Components.DrtTransactionValue, HTMLStencilElement {
    }
    var HTMLDrtTransactionValueElement: {
        prototype: HTMLDrtTransactionValueElement;
        new (): HTMLDrtTransactionValueElement;
    };
    interface HTMLDrtTransactionsTableElement extends Components.DrtTransactionsTable, HTMLStencilElement {
    }
    var HTMLDrtTransactionsTableElement: {
        prototype: HTMLDrtTransactionsTableElement;
        new (): HTMLDrtTransactionsTableElement;
    };
    interface HTMLDrtTriangularWarningIconElement extends Components.DrtTriangularWarningIcon, HTMLStencilElement {
    }
    var HTMLDrtTriangularWarningIconElement: {
        prototype: HTMLDrtTriangularWarningIconElement;
        new (): HTMLDrtTriangularWarningIconElement;
    };
    interface HTMLDrtTrimTextElement extends Components.DrtTrimText, HTMLStencilElement {
    }
    var HTMLDrtTrimTextElement: {
        prototype: HTMLDrtTrimTextElement;
        new (): HTMLDrtTrimTextElement;
    };
    interface HTMLDrtUnlockButtonElement extends Components.DrtUnlockButton, HTMLStencilElement {
    }
    var HTMLDrtUnlockButtonElement: {
        prototype: HTMLDrtUnlockButtonElement;
        new (): HTMLDrtUnlockButtonElement;
    };
    interface HTMLDrtUnlockPanelElement extends Components.DrtUnlockPanel, HTMLStencilElement {
    }
    var HTMLDrtUnlockPanelElement: {
        prototype: HTMLDrtUnlockPanelElement;
        new (): HTMLDrtUnlockPanelElement;
    };
    interface HTMLDrtUnlockPanelFooterElement extends Components.DrtUnlockPanelFooter, HTMLStencilElement {
    }
    var HTMLDrtUnlockPanelFooterElement: {
        prototype: HTMLDrtUnlockPanelFooterElement;
        new (): HTMLDrtUnlockPanelFooterElement;
    };
    interface HTMLDrtUnlockPanelGroupElementEventMap {
        "login": IProviderBase;
    }
    interface HTMLDrtUnlockPanelGroupElement extends Components.DrtUnlockPanelGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtUnlockPanelGroupElementEventMap>(type: K, listener: (this: HTMLDrtUnlockPanelGroupElement, ev: DrtUnlockPanelGroupCustomEvent<HTMLDrtUnlockPanelGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtUnlockPanelGroupElementEventMap>(type: K, listener: (this: HTMLDrtUnlockPanelGroupElement, ev: DrtUnlockPanelGroupCustomEvent<HTMLDrtUnlockPanelGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtUnlockPanelGroupElement: {
        prototype: HTMLDrtUnlockPanelGroupElement;
        new (): HTMLDrtUnlockPanelGroupElement;
    };
    interface HTMLDrtUnlockProviderButtonElement extends Components.DrtUnlockProviderButton, HTMLStencilElement {
    }
    var HTMLDrtUnlockProviderButtonElement: {
        prototype: HTMLDrtUnlockProviderButtonElement;
        new (): HTMLDrtUnlockProviderButtonElement;
    };
    interface HTMLDrtWalletConnectFlowElement extends Components.DrtWalletConnectFlow, HTMLStencilElement {
    }
    var HTMLDrtWalletConnectFlowElement: {
        prototype: HTMLDrtWalletConnectFlowElement;
        new (): HTMLDrtWalletConnectFlowElement;
    };
    interface HTMLDrtWalletConnectProviderElement extends Components.DrtWalletConnectProvider, HTMLStencilElement {
    }
    var HTMLDrtWalletConnectProviderElement: {
        prototype: HTMLDrtWalletConnectProviderElement;
        new (): HTMLDrtWalletConnectProviderElement;
    };
    interface HTMLDrtWalletProviderIconElement extends Components.DrtWalletProviderIcon, HTMLStencilElement {
    }
    var HTMLDrtWalletProviderIconElement: {
        prototype: HTMLDrtWalletProviderIconElement;
        new (): HTMLDrtWalletProviderIconElement;
    };
    interface HTMLDrtXaliasProviderIconElement extends Components.DrtXaliasProviderIcon, HTMLStencilElement {
    }
    var HTMLDrtXaliasProviderIconElement: {
        prototype: HTMLDrtXaliasProviderIconElement;
        new (): HTMLDrtXaliasProviderIconElement;
    };
    interface HTMLDrtXportalDownloadQrIconElement extends Components.DrtXportalDownloadQrIcon, HTMLStencilElement {
    }
    var HTMLDrtXportalDownloadQrIconElement: {
        prototype: HTMLDrtXportalDownloadQrIconElement;
        new (): HTMLDrtXportalDownloadQrIconElement;
    };
    interface HTMLDrtXportalQrCodePreloaderElement extends Components.DrtXportalQrCodePreloader, HTMLStencilElement {
    }
    var HTMLDrtXportalQrCodePreloaderElement: {
        prototype: HTMLDrtXportalQrCodePreloaderElement;
        new (): HTMLDrtXportalQrCodePreloaderElement;
    };
    interface HTMLElementTagNameMap {
        "drt-angle-left-icon": HTMLDrtAngleLeftIconElement;
        "drt-angle-right-icon": HTMLDrtAngleRightIconElement;
        "drt-angles-left-icon": HTMLDrtAnglesLeftIconElement;
        "drt-angles-right-icon": HTMLDrtAnglesRightIconElement;
        "drt-arrow-right-icon": HTMLDrtArrowRightIconElement;
        "drt-arrow-up-right-icon": HTMLDrtArrowUpRightIconElement;
        "drt-back-arrow-icon": HTMLDrtBackArrowIconElement;
        "drt-check-icon": HTMLDrtCheckIconElement;
        "drt-circle-exclamation-icon": HTMLDrtCircleExclamationIconElement;
        "drt-close-icon": HTMLDrtCloseIconElement;
        "drt-copy-button": HTMLDrtCopyButtonElement;
        "drt-custom-toast": HTMLDrtCustomToastElement;
        "drt-default-transaction-icon-large": HTMLDrtDefaultTransactionIconLargeElement;
        "drt-default-transaction-icon-small": HTMLDrtDefaultTransactionIconSmallElement;
        "drt-dharitri-logo-icon": HTMLDrtDharitriLogoIconElement;
        "drt-explorer-link": HTMLDrtExplorerLinkElement;
        "drt-extension-provider-icon": HTMLDrtExtensionProviderIconElement;
        "drt-fa-icon": HTMLDrtFaIconElement;
        "drt-format-amount": HTMLDrtFormatAmountElement;
        "drt-generic-modal": HTMLDrtGenericModalElement;
        "drt-generic-spinner": HTMLDrtGenericSpinnerElement;
        "drt-generic-toast": HTMLDrtGenericToastElement;
        "drt-ledger-addresses": HTMLDrtLedgerAddressesElement;
        "drt-ledger-confirm": HTMLDrtLedgerConfirmElement;
        "drt-ledger-flow": HTMLDrtLedgerFlowElement;
        "drt-ledger-icon": HTMLDrtLedgerIconElement;
        "drt-ledger-intro": HTMLDrtLedgerIntroElement;
        "drt-ledger-provider-icon": HTMLDrtLedgerProviderIconElement;
        "drt-magnifying-glass-icon": HTMLDrtMagnifyingGlassIconElement;
        "drt-metamask-provider-icon": HTMLDrtMetamaskProviderIconElement;
        "drt-notifications-feed": HTMLDrtNotificationsFeedElement;
        "drt-pagination": HTMLDrtPaginationElement;
        "drt-pagination-ellipsis": HTMLDrtPaginationEllipsisElement;
        "drt-pagination-ellipsis-form": HTMLDrtPaginationEllipsisFormElement;
        "drt-passkey-provider-icon": HTMLDrtPasskeyProviderIconElement;
        "drt-pencil-icon": HTMLDrtPencilIconElement;
        "drt-pending-transactions-panel": HTMLDrtPendingTransactionsPanelElement;
        "drt-preloader": HTMLDrtPreloaderElement;
        "drt-provider-idle-screen": HTMLDrtProviderIdleScreenElement;
        "drt-side-panel": HTMLDrtSidePanelElement;
        "drt-side-panel-header": HTMLDrtSidePanelHeaderElement;
        "drt-sign-transactions-advanced": HTMLDrtSignTransactionsAdvancedElement;
        "drt-sign-transactions-footer": HTMLDrtSignTransactionsFooterElement;
        "drt-sign-transactions-overview": HTMLDrtSignTransactionsOverviewElement;
        "drt-sign-transactions-panel": HTMLDrtSignTransactionsPanelElement;
        "drt-simple-toast": HTMLDrtSimpleToastElement;
        "drt-spinner-icon": HTMLDrtSpinnerIconElement;
        "drt-toast-list": HTMLDrtToastListElement;
        "drt-tooltip": HTMLDrtTooltipElement;
        "drt-transaction-account": HTMLDrtTransactionAccountElement;
        "drt-transaction-account-name": HTMLDrtTransactionAccountNameElement;
        "drt-transaction-age": HTMLDrtTransactionAgeElement;
        "drt-transaction-asset-icon": HTMLDrtTransactionAssetIconElement;
        "drt-transaction-direction-badge": HTMLDrtTransactionDirectionBadgeElement;
        "drt-transaction-hash": HTMLDrtTransactionHashElement;
        "drt-transaction-icon": HTMLDrtTransactionIconElement;
        "drt-transaction-list-item": HTMLDrtTransactionListItemElement;
        "drt-transaction-method": HTMLDrtTransactionMethodElement;
        "drt-transaction-shards": HTMLDrtTransactionShardsElement;
        "drt-transaction-toast": HTMLDrtTransactionToastElement;
        "drt-transaction-toast-content": HTMLDrtTransactionToastContentElement;
        "drt-transaction-toast-details": HTMLDrtTransactionToastDetailsElement;
        "drt-transaction-toast-details-body": HTMLDrtTransactionToastDetailsBodyElement;
        "drt-transaction-toast-progress": HTMLDrtTransactionToastProgressElement;
        "drt-transaction-value": HTMLDrtTransactionValueElement;
        "drt-transactions-table": HTMLDrtTransactionsTableElement;
        "drt-triangular-warning-icon": HTMLDrtTriangularWarningIconElement;
        "drt-trim-text": HTMLDrtTrimTextElement;
        "drt-unlock-button": HTMLDrtUnlockButtonElement;
        "drt-unlock-panel": HTMLDrtUnlockPanelElement;
        "drt-unlock-panel-footer": HTMLDrtUnlockPanelFooterElement;
        "drt-unlock-panel-group": HTMLDrtUnlockPanelGroupElement;
        "drt-unlock-provider-button": HTMLDrtUnlockProviderButtonElement;
        "drt-wallet-connect-flow": HTMLDrtWalletConnectFlowElement;
        "drt-wallet-connect-provider": HTMLDrtWalletConnectProviderElement;
        "drt-wallet-provider-icon": HTMLDrtWalletProviderIconElement;
        "drt-xalias-provider-icon": HTMLDrtXaliasProviderIconElement;
        "drt-xportal-download-qr-icon": HTMLDrtXportalDownloadQrIconElement;
        "drt-xportal-qr-code-preloader": HTMLDrtXportalQrCodePreloaderElement;
    }
}
declare namespace LocalJSX {
    interface DrtAngleLeftIcon {
    }
    interface DrtAngleRightIcon {
    }
    interface DrtAnglesLeftIcon {
    }
    interface DrtAnglesRightIcon {
    }
    interface DrtArrowRightIcon {
        "class"?: string;
    }
    interface DrtArrowUpRightIcon {
        "class"?: string;
    }
    interface DrtBackArrowIcon {
    }
    interface DrtCheckIcon {
        "class"?: string;
    }
    interface DrtCircleExclamationIcon {
    }
    interface DrtCloseIcon {
    }
    interface DrtCopyButton {
        /**
          * @default 'copy-button'
         */
        "class"?: string;
        "copyIcon"?: IconDefinition | string;
        /**
          * @default 'copy-button-icon'
         */
        "iconClass"?: string;
        "successIcon"?: IconDefinition | string;
        "text"?: string;
    }
    interface DrtCustomToast {
        "onDeleteToast"?: (event: DrtCustomToastCustomEvent<string>) => void;
        "toast"?: IComponentToast;
    }
    interface DrtDefaultTransactionIconLarge {
    }
    interface DrtDefaultTransactionIconSmall {
    }
    interface DrtDharitriLogoIcon {
        "class"?: string;
    }
    interface DrtExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition | string;
        /**
          * @default 'explorer-link-icon'
         */
        "iconClass"?: string;
        "link"?: string;
        "text"?: string;
    }
    interface DrtExtensionProviderIcon {
        "class"?: string;
        "height"?: number;
        "width"?: number;
    }
    interface DrtFaIcon {
        /**
          * @default 'fa-icon'
         */
        "class"?: string;
        "description"?: string;
        "icon"?: IconDefinition | string;
    }
    interface DrtFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "decimalClass"?: string;
        "isValid"?: boolean;
        "label"?: string;
        "labelClass"?: string;
        /**
          * @default true
         */
        "showLabel"?: boolean;
        "valueDecimal"?: string;
        "valueInteger"?: string;
    }
    interface DrtGenericModal {
        "body"?: IGenericModalProps['body'];
        "modalSubtitle"?: IGenericModalProps['modalSubtitle'];
        "modalTitle"?: IGenericModalProps['modalTitle'];
        "onClose"?: (event: DrtGenericModalCustomEvent<any>) => void;
    }
    interface DrtGenericSpinner {
    }
    interface DrtGenericToast {
        "onDeleteToast"?: (event: DrtGenericToastCustomEvent<string>) => void;
        "toast"?: CustomToastType;
    }
    interface DrtLedgerAddresses {
        "accountScreenData"?: IAccountScreenData;
        "onAccessWallet"?: (event: DrtLedgerAddressesCustomEvent<any>) => void;
        "onPageChange"?: (event: DrtLedgerAddressesCustomEvent<number>) => void;
        "onSelectAccount"?: (event: DrtLedgerAddressesCustomEvent<any>) => void;
        "selectedIndex"?: number;
    }
    interface DrtLedgerConfirm {
        "confirmScreenData"?: IConfirmScreenData;
    }
    interface DrtLedgerFlow {
        /**
          * @default {     accountScreenData: null,     confirmScreenData: null,     connectScreenData: {},   }
         */
        "data"?: ILedgerConnectPanelData;
    }
    interface DrtLedgerIcon {
    }
    interface DrtLedgerIntro {
        "connectScreenData"?: IConnectScreenData;
        /**
          * @default false
         */
        "isAwaiting"?: boolean;
        "onConnect"?: (event: DrtLedgerIntroCustomEvent<any>) => void;
    }
    interface DrtLedgerProviderIcon {
        "class"?: string;
    }
    interface DrtMagnifyingGlassIcon {
        "class"?: string;
    }
    interface DrtMetamaskProviderIcon {
        "class"?: string;
    }
    interface DrtNotificationsFeed {
    }
    interface DrtPagination {
        "class"?: string;
        /**
          * @default 1
         */
        "currentPage"?: number;
        /**
          * @default false
         */
        "isDisabled"?: boolean;
        "onPageChange"?: (event: DrtPaginationCustomEvent<number>) => void;
        "totalPages"?: number;
    }
    interface DrtPaginationEllipsis {
        /**
          * @default false
         */
        "isActive"?: boolean;
    }
    interface DrtPaginationEllipsisForm {
        /**
          * @default false
         */
        "isVisible"?: boolean;
        "maxPageToSearchFor"?: number;
        "onSearch"?: (event: DrtPaginationEllipsisFormCustomEvent<number>) => void;
    }
    interface DrtPasskeyProviderIcon {
        "class"?: string;
    }
    interface DrtPencilIcon {
        "class"?: string;
    }
    interface DrtPendingTransactionsPanel {
        /**
          * @default {     provider: null,     shouldClose: false,   }
         */
        "data"?: IPendingTransactionsPanelState;
    }
    interface DrtPreloader {
        "class"?: string;
    }
    interface DrtProviderIdleScreen {
        /**
          * @default ''
         */
        "introText"?: string;
        "onAccess"?: (event: DrtProviderIdleScreenCustomEvent<any>) => void;
        "onClose"?: (event: DrtProviderIdleScreenCustomEvent<any>) => void;
        /**
          * @default null
         */
        "provider"?: IProviderBase | null;
    }
    interface DrtSidePanel {
        "hasBackButton"?: boolean;
        /**
          * @default false
         */
        "isOpen"?: boolean;
        "onBack"?: (event: DrtSidePanelCustomEvent<any>) => void;
        "onClose"?: (event: DrtSidePanelCustomEvent<any>) => void;
        "panelClassName"?: string;
        "panelTitle"?: string;
        /**
          * @default true
         */
        "showHeader"?: boolean;
    }
    interface DrtSidePanelHeader {
        /**
          * @default true
         */
        "hasLeftButton"?: boolean;
        /**
          * @default true
         */
        "hasRightButton"?: boolean;
        "onLeftButtonClick"?: (event: DrtSidePanelHeaderCustomEvent<any>) => void;
        "onRightButtonClick"?: (event: DrtSidePanelHeaderCustomEvent<any>) => void;
        "panelClassName"?: string;
        "panelTitle"?: string;
    }
    interface DrtSignTransactionsAdvanced {
        "data"?: string;
        "highlight"?: string;
    }
    interface DrtSignTransactionsFooter {
    }
    interface DrtSignTransactionsOverview {
        "action"?: string;
        "amount"?: string;
        "identifier"?: string;
        "interactor"?: string;
        "interactorIconUrl"?: string;
        /**
          * @default false
         */
        "isApp"?: boolean;
        /**
          * @default '~$0.00078'
         */
        "networkFee"?: string;
        "tokenIconUrl"?: string;
        "usdValue"?: string;
    }
    interface DrtSignTransactionsPanel {
        /**
          * @default {     commonData: {       rewaLabel: '',       feeLimit: '',       feeInFiatLimit: '',       transactionsCount: 0,       currentIndexToSign: 0,       currentIndex: 0,       ppuOptions: [],     },     tokenTransaction: null,     nftTransaction: null,     sftTransaction: null,   }
         */
        "data"?: ISignTransactionsPanelData;
    }
    interface DrtSimpleToast {
        "onDeleteToast"?: (event: DrtSimpleToastCustomEvent<void>) => void;
        "toast"?: ISimpleToast;
    }
    interface DrtSpinnerIcon {
        "class"?: string;
    }
    interface DrtToastList {
        /**
          * @default []
         */
        "customToasts"?: CustomToastType1[];
        /**
          * @default []
         */
        "transactionToasts"?: ITransactionToast[];
    }
    interface DrtTooltip {
        "class"?: string;
        "onTriggerRender"?: (event: DrtTooltipCustomEvent<boolean>) => void;
        /**
          * @default 'top'
         */
        "position"?: 'top' | 'bottom';
        "trigger"?: HTMLElement;
        /**
          * @default false
         */
        "triggerOnClick"?: boolean;
    }
    interface DrtTransactionAccount {
        "account"?: ITransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope"?: 'receiver' | 'sender';
        /**
          * @default false
         */
        "showLockedAccounts"?: boolean;
    }
    interface DrtTransactionAccountName {
        "address"?: string;
        "class"?: string;
        "dataTestId"?: string;
        "description"?: string;
        "name"?: string;
    }
    interface DrtTransactionAge {
        "age"?: string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface DrtTransactionAssetIcon {
        "iconSize"?: IconSizeEnumType;
        "transaction"?: ITransactionListItem;
    }
    interface DrtTransactionDirectionBadge {
        "class"?: string;
        "direction"?: string;
    }
    interface DrtTransactionHash {
        "class"?: string;
        "transaction"?: ITransactionsTableRow;
    }
    interface DrtTransactionIcon {
        "class"?: string;
        "iconInfo"?: ITransactionIconInfo;
    }
    interface DrtTransactionListItem {
        "transaction"?: ITransactionListItem1;
    }
    interface DrtTransactionMethod {
        "actionDescription"?: string;
        "class"?: string;
        "method"?: string;
    }
    interface DrtTransactionShards {
        "class"?: string;
        "transaction"?: ITransactionsTableRow;
    }
    interface DrtTransactionToast {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: DrtTransactionToastCustomEvent<void>) => void;
        /**
          * @default ''
         */
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        /**
          * @default ''
         */
        "toastId"?: string;
        "transactionProgressState"?: ITransactionProgressState;
        /**
          * @default []
         */
        "transactions"?: ITransactionListItem[];
        "wrapperClass"?: string;
    }
    interface DrtTransactionToastContent {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: DrtTransactionToastContentCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "transactions"?: ITransactionListItem[];
    }
    interface DrtTransactionToastDetails {
        /**
          * @default 5
         */
        "maxShownTransactions"?: number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass"?: string;
        "transactions"?: ITransactionListItem[];
    }
    interface DrtTransactionToastDetailsBody {
        "hash"?: string;
        "index"?: string;
        "link"?: string;
        "status"?: string;
        /**
          * @default 'transaction-details-list-item'
         */
        "transactionClass"?: string;
    }
    interface DrtTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface DrtTransactionValue {
        "class"?: string;
        "value"?: ITransactionValue;
    }
    interface DrtTransactionsTable {
        "class"?: string;
        "transactions"?: ITransactionsTableRow[];
    }
    interface DrtTriangularWarningIcon {
    }
    interface DrtTrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text"?: string;
    }
    interface DrtUnlockButton {
        "class"?: string;
        "icon"?: HTMLElement;
        "iconUrl"?: string;
        "label"?: string;
        "type"?: IProviderBase['type'];
    }
    interface DrtUnlockPanel {
        /**
          * @default []
         */
        "allowedProviders"?: IProviderBase[];
        /**
          * @default false
         */
        "isOpen"?: boolean;
    }
    interface DrtUnlockPanelFooter {
    }
    interface DrtUnlockPanelGroup {
        /**
          * @default ''
         */
        "groupTitle"?: string;
        "onLogin"?: (event: DrtUnlockPanelGroupCustomEvent<IProviderBase>) => void;
        /**
          * @default []
         */
        "providers"?: IProviderBase[];
    }
    interface DrtUnlockProviderButton {
        "class"?: string;
        "provider"?: IProviderBase<ProviderTypeEnum>;
    }
    interface DrtWalletConnectFlow {
        /**
          * @default ''
         */
        "qrCodeSvg"?: string;
    }
    interface DrtWalletConnectProvider {
        /**
          * @default { wcURI: '' }
         */
        "data"?: IWalletConnectPanelData;
    }
    interface DrtWalletProviderIcon {
        "class"?: string;
    }
    interface DrtXaliasProviderIcon {
    }
    interface DrtXportalDownloadQrIcon {
    }
    interface DrtXportalQrCodePreloader {
        "class"?: string;
    }
    interface IntrinsicElements {
        "drt-angle-left-icon": DrtAngleLeftIcon;
        "drt-angle-right-icon": DrtAngleRightIcon;
        "drt-angles-left-icon": DrtAnglesLeftIcon;
        "drt-angles-right-icon": DrtAnglesRightIcon;
        "drt-arrow-right-icon": DrtArrowRightIcon;
        "drt-arrow-up-right-icon": DrtArrowUpRightIcon;
        "drt-back-arrow-icon": DrtBackArrowIcon;
        "drt-check-icon": DrtCheckIcon;
        "drt-circle-exclamation-icon": DrtCircleExclamationIcon;
        "drt-close-icon": DrtCloseIcon;
        "drt-copy-button": DrtCopyButton;
        "drt-custom-toast": DrtCustomToast;
        "drt-default-transaction-icon-large": DrtDefaultTransactionIconLarge;
        "drt-default-transaction-icon-small": DrtDefaultTransactionIconSmall;
        "drt-dharitri-logo-icon": DrtDharitriLogoIcon;
        "drt-explorer-link": DrtExplorerLink;
        "drt-extension-provider-icon": DrtExtensionProviderIcon;
        "drt-fa-icon": DrtFaIcon;
        "drt-format-amount": DrtFormatAmount;
        "drt-generic-modal": DrtGenericModal;
        "drt-generic-spinner": DrtGenericSpinner;
        "drt-generic-toast": DrtGenericToast;
        "drt-ledger-addresses": DrtLedgerAddresses;
        "drt-ledger-confirm": DrtLedgerConfirm;
        "drt-ledger-flow": DrtLedgerFlow;
        "drt-ledger-icon": DrtLedgerIcon;
        "drt-ledger-intro": DrtLedgerIntro;
        "drt-ledger-provider-icon": DrtLedgerProviderIcon;
        "drt-magnifying-glass-icon": DrtMagnifyingGlassIcon;
        "drt-metamask-provider-icon": DrtMetamaskProviderIcon;
        "drt-notifications-feed": DrtNotificationsFeed;
        "drt-pagination": DrtPagination;
        "drt-pagination-ellipsis": DrtPaginationEllipsis;
        "drt-pagination-ellipsis-form": DrtPaginationEllipsisForm;
        "drt-passkey-provider-icon": DrtPasskeyProviderIcon;
        "drt-pencil-icon": DrtPencilIcon;
        "drt-pending-transactions-panel": DrtPendingTransactionsPanel;
        "drt-preloader": DrtPreloader;
        "drt-provider-idle-screen": DrtProviderIdleScreen;
        "drt-side-panel": DrtSidePanel;
        "drt-side-panel-header": DrtSidePanelHeader;
        "drt-sign-transactions-advanced": DrtSignTransactionsAdvanced;
        "drt-sign-transactions-footer": DrtSignTransactionsFooter;
        "drt-sign-transactions-overview": DrtSignTransactionsOverview;
        "drt-sign-transactions-panel": DrtSignTransactionsPanel;
        "drt-simple-toast": DrtSimpleToast;
        "drt-spinner-icon": DrtSpinnerIcon;
        "drt-toast-list": DrtToastList;
        "drt-tooltip": DrtTooltip;
        "drt-transaction-account": DrtTransactionAccount;
        "drt-transaction-account-name": DrtTransactionAccountName;
        "drt-transaction-age": DrtTransactionAge;
        "drt-transaction-asset-icon": DrtTransactionAssetIcon;
        "drt-transaction-direction-badge": DrtTransactionDirectionBadge;
        "drt-transaction-hash": DrtTransactionHash;
        "drt-transaction-icon": DrtTransactionIcon;
        "drt-transaction-list-item": DrtTransactionListItem;
        "drt-transaction-method": DrtTransactionMethod;
        "drt-transaction-shards": DrtTransactionShards;
        "drt-transaction-toast": DrtTransactionToast;
        "drt-transaction-toast-content": DrtTransactionToastContent;
        "drt-transaction-toast-details": DrtTransactionToastDetails;
        "drt-transaction-toast-details-body": DrtTransactionToastDetailsBody;
        "drt-transaction-toast-progress": DrtTransactionToastProgress;
        "drt-transaction-value": DrtTransactionValue;
        "drt-transactions-table": DrtTransactionsTable;
        "drt-triangular-warning-icon": DrtTriangularWarningIcon;
        "drt-trim-text": DrtTrimText;
        "drt-unlock-button": DrtUnlockButton;
        "drt-unlock-panel": DrtUnlockPanel;
        "drt-unlock-panel-footer": DrtUnlockPanelFooter;
        "drt-unlock-panel-group": DrtUnlockPanelGroup;
        "drt-unlock-provider-button": DrtUnlockProviderButton;
        "drt-wallet-connect-flow": DrtWalletConnectFlow;
        "drt-wallet-connect-provider": DrtWalletConnectProvider;
        "drt-wallet-provider-icon": DrtWalletProviderIcon;
        "drt-xalias-provider-icon": DrtXaliasProviderIcon;
        "drt-xportal-download-qr-icon": DrtXportalDownloadQrIcon;
        "drt-xportal-qr-code-preloader": DrtXportalQrCodePreloader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "drt-angle-left-icon": LocalJSX.DrtAngleLeftIcon & JSXBase.HTMLAttributes<HTMLDrtAngleLeftIconElement>;
            "drt-angle-right-icon": LocalJSX.DrtAngleRightIcon & JSXBase.HTMLAttributes<HTMLDrtAngleRightIconElement>;
            "drt-angles-left-icon": LocalJSX.DrtAnglesLeftIcon & JSXBase.HTMLAttributes<HTMLDrtAnglesLeftIconElement>;
            "drt-angles-right-icon": LocalJSX.DrtAnglesRightIcon & JSXBase.HTMLAttributes<HTMLDrtAnglesRightIconElement>;
            "drt-arrow-right-icon": LocalJSX.DrtArrowRightIcon & JSXBase.HTMLAttributes<HTMLDrtArrowRightIconElement>;
            "drt-arrow-up-right-icon": LocalJSX.DrtArrowUpRightIcon & JSXBase.HTMLAttributes<HTMLDrtArrowUpRightIconElement>;
            "drt-back-arrow-icon": LocalJSX.DrtBackArrowIcon & JSXBase.HTMLAttributes<HTMLDrtBackArrowIconElement>;
            "drt-check-icon": LocalJSX.DrtCheckIcon & JSXBase.HTMLAttributes<HTMLDrtCheckIconElement>;
            "drt-circle-exclamation-icon": LocalJSX.DrtCircleExclamationIcon & JSXBase.HTMLAttributes<HTMLDrtCircleExclamationIconElement>;
            "drt-close-icon": LocalJSX.DrtCloseIcon & JSXBase.HTMLAttributes<HTMLDrtCloseIconElement>;
            "drt-copy-button": LocalJSX.DrtCopyButton & JSXBase.HTMLAttributes<HTMLDrtCopyButtonElement>;
            "drt-custom-toast": LocalJSX.DrtCustomToast & JSXBase.HTMLAttributes<HTMLDrtCustomToastElement>;
            "drt-default-transaction-icon-large": LocalJSX.DrtDefaultTransactionIconLarge & JSXBase.HTMLAttributes<HTMLDrtDefaultTransactionIconLargeElement>;
            "drt-default-transaction-icon-small": LocalJSX.DrtDefaultTransactionIconSmall & JSXBase.HTMLAttributes<HTMLDrtDefaultTransactionIconSmallElement>;
            "drt-dharitri-logo-icon": LocalJSX.DrtDharitriLogoIcon & JSXBase.HTMLAttributes<HTMLDrtDharitriLogoIconElement>;
            "drt-explorer-link": LocalJSX.DrtExplorerLink & JSXBase.HTMLAttributes<HTMLDrtExplorerLinkElement>;
            "drt-extension-provider-icon": LocalJSX.DrtExtensionProviderIcon & JSXBase.HTMLAttributes<HTMLDrtExtensionProviderIconElement>;
            "drt-fa-icon": LocalJSX.DrtFaIcon & JSXBase.HTMLAttributes<HTMLDrtFaIconElement>;
            "drt-format-amount": LocalJSX.DrtFormatAmount & JSXBase.HTMLAttributes<HTMLDrtFormatAmountElement>;
            "drt-generic-modal": LocalJSX.DrtGenericModal & JSXBase.HTMLAttributes<HTMLDrtGenericModalElement>;
            "drt-generic-spinner": LocalJSX.DrtGenericSpinner & JSXBase.HTMLAttributes<HTMLDrtGenericSpinnerElement>;
            "drt-generic-toast": LocalJSX.DrtGenericToast & JSXBase.HTMLAttributes<HTMLDrtGenericToastElement>;
            "drt-ledger-addresses": LocalJSX.DrtLedgerAddresses & JSXBase.HTMLAttributes<HTMLDrtLedgerAddressesElement>;
            "drt-ledger-confirm": LocalJSX.DrtLedgerConfirm & JSXBase.HTMLAttributes<HTMLDrtLedgerConfirmElement>;
            "drt-ledger-flow": LocalJSX.DrtLedgerFlow & JSXBase.HTMLAttributes<HTMLDrtLedgerFlowElement>;
            "drt-ledger-icon": LocalJSX.DrtLedgerIcon & JSXBase.HTMLAttributes<HTMLDrtLedgerIconElement>;
            "drt-ledger-intro": LocalJSX.DrtLedgerIntro & JSXBase.HTMLAttributes<HTMLDrtLedgerIntroElement>;
            "drt-ledger-provider-icon": LocalJSX.DrtLedgerProviderIcon & JSXBase.HTMLAttributes<HTMLDrtLedgerProviderIconElement>;
            "drt-magnifying-glass-icon": LocalJSX.DrtMagnifyingGlassIcon & JSXBase.HTMLAttributes<HTMLDrtMagnifyingGlassIconElement>;
            "drt-metamask-provider-icon": LocalJSX.DrtMetamaskProviderIcon & JSXBase.HTMLAttributes<HTMLDrtMetamaskProviderIconElement>;
            "drt-notifications-feed": LocalJSX.DrtNotificationsFeed & JSXBase.HTMLAttributes<HTMLDrtNotificationsFeedElement>;
            "drt-pagination": LocalJSX.DrtPagination & JSXBase.HTMLAttributes<HTMLDrtPaginationElement>;
            "drt-pagination-ellipsis": LocalJSX.DrtPaginationEllipsis & JSXBase.HTMLAttributes<HTMLDrtPaginationEllipsisElement>;
            "drt-pagination-ellipsis-form": LocalJSX.DrtPaginationEllipsisForm & JSXBase.HTMLAttributes<HTMLDrtPaginationEllipsisFormElement>;
            "drt-passkey-provider-icon": LocalJSX.DrtPasskeyProviderIcon & JSXBase.HTMLAttributes<HTMLDrtPasskeyProviderIconElement>;
            "drt-pencil-icon": LocalJSX.DrtPencilIcon & JSXBase.HTMLAttributes<HTMLDrtPencilIconElement>;
            "drt-pending-transactions-panel": LocalJSX.DrtPendingTransactionsPanel & JSXBase.HTMLAttributes<HTMLDrtPendingTransactionsPanelElement>;
            "drt-preloader": LocalJSX.DrtPreloader & JSXBase.HTMLAttributes<HTMLDrtPreloaderElement>;
            "drt-provider-idle-screen": LocalJSX.DrtProviderIdleScreen & JSXBase.HTMLAttributes<HTMLDrtProviderIdleScreenElement>;
            "drt-side-panel": LocalJSX.DrtSidePanel & JSXBase.HTMLAttributes<HTMLDrtSidePanelElement>;
            "drt-side-panel-header": LocalJSX.DrtSidePanelHeader & JSXBase.HTMLAttributes<HTMLDrtSidePanelHeaderElement>;
            "drt-sign-transactions-advanced": LocalJSX.DrtSignTransactionsAdvanced & JSXBase.HTMLAttributes<HTMLDrtSignTransactionsAdvancedElement>;
            "drt-sign-transactions-footer": LocalJSX.DrtSignTransactionsFooter & JSXBase.HTMLAttributes<HTMLDrtSignTransactionsFooterElement>;
            "drt-sign-transactions-overview": LocalJSX.DrtSignTransactionsOverview & JSXBase.HTMLAttributes<HTMLDrtSignTransactionsOverviewElement>;
            "drt-sign-transactions-panel": LocalJSX.DrtSignTransactionsPanel & JSXBase.HTMLAttributes<HTMLDrtSignTransactionsPanelElement>;
            "drt-simple-toast": LocalJSX.DrtSimpleToast & JSXBase.HTMLAttributes<HTMLDrtSimpleToastElement>;
            "drt-spinner-icon": LocalJSX.DrtSpinnerIcon & JSXBase.HTMLAttributes<HTMLDrtSpinnerIconElement>;
            "drt-toast-list": LocalJSX.DrtToastList & JSXBase.HTMLAttributes<HTMLDrtToastListElement>;
            "drt-tooltip": LocalJSX.DrtTooltip & JSXBase.HTMLAttributes<HTMLDrtTooltipElement>;
            "drt-transaction-account": LocalJSX.DrtTransactionAccount & JSXBase.HTMLAttributes<HTMLDrtTransactionAccountElement>;
            "drt-transaction-account-name": LocalJSX.DrtTransactionAccountName & JSXBase.HTMLAttributes<HTMLDrtTransactionAccountNameElement>;
            "drt-transaction-age": LocalJSX.DrtTransactionAge & JSXBase.HTMLAttributes<HTMLDrtTransactionAgeElement>;
            "drt-transaction-asset-icon": LocalJSX.DrtTransactionAssetIcon & JSXBase.HTMLAttributes<HTMLDrtTransactionAssetIconElement>;
            "drt-transaction-direction-badge": LocalJSX.DrtTransactionDirectionBadge & JSXBase.HTMLAttributes<HTMLDrtTransactionDirectionBadgeElement>;
            "drt-transaction-hash": LocalJSX.DrtTransactionHash & JSXBase.HTMLAttributes<HTMLDrtTransactionHashElement>;
            "drt-transaction-icon": LocalJSX.DrtTransactionIcon & JSXBase.HTMLAttributes<HTMLDrtTransactionIconElement>;
            "drt-transaction-list-item": LocalJSX.DrtTransactionListItem & JSXBase.HTMLAttributes<HTMLDrtTransactionListItemElement>;
            "drt-transaction-method": LocalJSX.DrtTransactionMethod & JSXBase.HTMLAttributes<HTMLDrtTransactionMethodElement>;
            "drt-transaction-shards": LocalJSX.DrtTransactionShards & JSXBase.HTMLAttributes<HTMLDrtTransactionShardsElement>;
            "drt-transaction-toast": LocalJSX.DrtTransactionToast & JSXBase.HTMLAttributes<HTMLDrtTransactionToastElement>;
            "drt-transaction-toast-content": LocalJSX.DrtTransactionToastContent & JSXBase.HTMLAttributes<HTMLDrtTransactionToastContentElement>;
            "drt-transaction-toast-details": LocalJSX.DrtTransactionToastDetails & JSXBase.HTMLAttributes<HTMLDrtTransactionToastDetailsElement>;
            "drt-transaction-toast-details-body": LocalJSX.DrtTransactionToastDetailsBody & JSXBase.HTMLAttributes<HTMLDrtTransactionToastDetailsBodyElement>;
            "drt-transaction-toast-progress": LocalJSX.DrtTransactionToastProgress & JSXBase.HTMLAttributes<HTMLDrtTransactionToastProgressElement>;
            "drt-transaction-value": LocalJSX.DrtTransactionValue & JSXBase.HTMLAttributes<HTMLDrtTransactionValueElement>;
            "drt-transactions-table": LocalJSX.DrtTransactionsTable & JSXBase.HTMLAttributes<HTMLDrtTransactionsTableElement>;
            "drt-triangular-warning-icon": LocalJSX.DrtTriangularWarningIcon & JSXBase.HTMLAttributes<HTMLDrtTriangularWarningIconElement>;
            "drt-trim-text": LocalJSX.DrtTrimText & JSXBase.HTMLAttributes<HTMLDrtTrimTextElement>;
            "drt-unlock-button": LocalJSX.DrtUnlockButton & JSXBase.HTMLAttributes<HTMLDrtUnlockButtonElement>;
            "drt-unlock-panel": LocalJSX.DrtUnlockPanel & JSXBase.HTMLAttributes<HTMLDrtUnlockPanelElement>;
            "drt-unlock-panel-footer": LocalJSX.DrtUnlockPanelFooter & JSXBase.HTMLAttributes<HTMLDrtUnlockPanelFooterElement>;
            "drt-unlock-panel-group": LocalJSX.DrtUnlockPanelGroup & JSXBase.HTMLAttributes<HTMLDrtUnlockPanelGroupElement>;
            "drt-unlock-provider-button": LocalJSX.DrtUnlockProviderButton & JSXBase.HTMLAttributes<HTMLDrtUnlockProviderButtonElement>;
            "drt-wallet-connect-flow": LocalJSX.DrtWalletConnectFlow & JSXBase.HTMLAttributes<HTMLDrtWalletConnectFlowElement>;
            "drt-wallet-connect-provider": LocalJSX.DrtWalletConnectProvider & JSXBase.HTMLAttributes<HTMLDrtWalletConnectProviderElement>;
            "drt-wallet-provider-icon": LocalJSX.DrtWalletProviderIcon & JSXBase.HTMLAttributes<HTMLDrtWalletProviderIconElement>;
            "drt-xalias-provider-icon": LocalJSX.DrtXaliasProviderIcon & JSXBase.HTMLAttributes<HTMLDrtXaliasProviderIconElement>;
            "drt-xportal-download-qr-icon": LocalJSX.DrtXportalDownloadQrIcon & JSXBase.HTMLAttributes<HTMLDrtXportalDownloadQrIconElement>;
            "drt-xportal-qr-code-preloader": LocalJSX.DrtXportalQrCodePreloader & JSXBase.HTMLAttributes<HTMLDrtXportalQrCodePreloaderElement>;
        }
    }
}
